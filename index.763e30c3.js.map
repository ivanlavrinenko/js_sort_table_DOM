{"mappings":"ACEA,SAAS,gBAAgB,CAAC,MAAM,OAAO,CAAC,SAAC,CAAA,CAAQ,CAAjD,EACE,EAAO,gBAAgB,CAAC,QAAS,WAE/B,IAAM,EAAQ,AADA,EAAO,OAAO,CAAC,SACT,aAAa,CAAC,SAC5B,EAAO,MAAM,IAAI,CAAC,EAAM,gBAAgB,CAAC,OAEzC,EAAe,SAAC,CAAA,CAAK,CAA3B,EACE,IAAM,EAAW,EAAI,KAAK,CAAC,EAAI,CAAC,SAAS,CAAC,IAAI,UAE9C,AAAI,AAAQ,IAAR,GAAa,AAAQ,IAAR,EACR,WAAW,EAAS,OAAO,CAAC,aAAc,KAG5C,CACT,EAEA,EAAK,IAAI,CAAC,SAAC,CAAA,CAAM,CAAjB,EACE,IAAM,EAAO,EAAa,EAAM,GAC1B,EAAO,EAAa,EAAM,GAEhC,OAAO,EAAO,EAAO,EAAI,EAAO,EAAO,GAAK,CAC9C,GAEA,EAAK,OAAO,CAAC,SAAC,CAAd,EAAsB,OAAA,EAAM,WAAW,CAAC,E,EAC1C,EACF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\ndocument.querySelectorAll(\"th\").forEach(function(header, index) {\n    header.addEventListener(\"click\", function() {\n        var table = header.closest(\"table\");\n        var tbody = table.querySelector(\"tbody\");\n        var rows = Array.from(tbody.querySelectorAll(\"tr\"));\n        var getCellValue = function(row, idx) {\n            var cellText = row.cells[idx].innerText.trim();\n            if (idx === 2 || idx === 3) return parseFloat(cellText.replace(/[^0-9.-]+/g, \"\"));\n            return cellText;\n        };\n        rows.sort(function(rowA, rowB) {\n            var valA = getCellValue(rowA, index);\n            var valB = getCellValue(rowB, index);\n            return valA > valB ? 1 : valA < valB ? -1 : 0;\n        });\n        rows.forEach(function(row) {\n            return tbody.appendChild(row);\n        });\n    });\n});\n\n//# sourceMappingURL=index.763e30c3.js.map\n","'use strict';\n\ndocument.querySelectorAll('th').forEach((header, index) => {\n  header.addEventListener('click', () => {\n    const table = header.closest('table');\n    const tbody = table.querySelector('tbody');\n    const rows = Array.from(tbody.querySelectorAll('tr'));\n\n    const getCellValue = (row, idx) => {\n      const cellText = row.cells[idx].innerText.trim();\n\n      if (idx === 2 || idx === 3) {\n        return parseFloat(cellText.replace(/[^0-9.-]+/g, ''));\n      }\n\n      return cellText;\n    };\n\n    rows.sort((rowA, rowB) => {\n      const valA = getCellValue(rowA, index);\n      const valB = getCellValue(rowB, index);\n\n      return valA > valB ? 1 : valA < valB ? -1 : 0;\n    });\n\n    rows.forEach((row) => tbody.appendChild(row));\n  });\n});\n"],"names":["document","querySelectorAll","forEach","header","index","addEventListener","tbody","table","closest","querySelector","rows","Array","from","getCellValue","row","idx","cellText","cells","innerText","trim","parseFloat","replace","sort","rowA","rowB","valA","valB","appendChild"],"version":3,"file":"index.763e30c3.js.map"}